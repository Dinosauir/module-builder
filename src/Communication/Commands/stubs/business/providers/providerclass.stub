<?php

declare(strict_types=1);


namespace DummyNamespace;

use App\Business\DummyClass\Facades\DummyClassFacade;
use App\Business\DummyClass\Services\Creator\AbstractDummyClassCreator;
use App\Business\DummyClass\Services\Creator\DummyClassCreator;
use App\Persistence\DummyClass\Services\Saver\AbstractDummyClassSaver;
use App\Persistence\DummyClass\Services\Saver\DummyClassSaver;
use App\Persistence\DummyClass\Services\Updater\AbstractDummyClassUpdater;
use App\Persistence\DummyClass\Services\Updater\DummyClassUpdater;
use App\Persistence\DummyClass\Services\Deleter\DummyClassDeleter;
use App\Persistence\DummyClass\Services\Deleter\DummyClassDeleterInterface;
use Illuminate\Support\ServiceProvider;

class DummyClassServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        if ($this->app->runningUnitTests()) {
            $this->app->bind(AbstractDummyClassCreator::class, DummyClassCreator::class);
            $this->app->bind(AbstractDummyClassSaver::class, DummyClassSaver::class);
            $this->app->bind(AbstractDummyClassUpdater::class, DummyClassUpdater::class);
            $this->app->bind(DummyClassDeleterInterface::class, DummyClassDeleter::class);
        }

        $this->app->when(DummyClassFacade::class)
            ->needs(AbstractDummyClassCreator::class)
            ->give(function ($app) {
                return $app->make(DummyClassCreator::class);
            });

        $this->app->when(DummyClassFacade::class)
            ->needs(AbstractDummyClassSaver::class)
            ->give(function ($app) {
                return $app->make(DummyClassSaver::class);
            });

        $this->app->when(DummyClassFacade::class)
            ->needs(AbstractDummyClassUpdater::class)
            ->give(function ($app) {
                return $app->make(DummyClassUpdater::class);
            });

        $this->app->when(DummyClassFacade::class)
            ->needs(DummyClassDeleterInterface::class)
            ->give(function ($app) {
                 return $app->make(DummyClassDeleter::class);
            });
    }

    public function boot(): void
    {
        $this->loadMigrationsFrom('app/Persistence/' . $this->getModelName() . '/database/migrations');
        if(file_exists($this->getRoutePath() . '/Communication/' . $this->getModelName() . '/routes/api.php'){
            $this->loadRoutesFrom($this->getRoutePath() . '/Communication/' . $this->getModelName() . '/routes/api.php');
        }

        if(file_exists($this->getRoutePath() . '/Communication/' . $this->getModelName() . '/routes/web.php'){
            $this->loadRoutesFrom($this->getRoutePath() . '/Communication/' . $this->getModelName() . '/routes/web.php');
        }
    }

    private function getModelName(): string
    {
        $explodedNamespace = explode('\\', __NAMESPACE__);

        return $explodedNamespace[array_key_last($explodedNamespace)];
    }

    private function getRoutePath(): string
    {
            return str_replace('/Business/' . $this->getModelName(), '', __DIR__);
    }
}
